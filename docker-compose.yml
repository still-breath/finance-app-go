version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finance-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-finance_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-yourpassword}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-trust}
      TZ: Asia/Jakarta
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - finance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d finance_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Go Backend Service
  finance-backend:
    build:
      context: ./finance-backend-go
      dockerfile: Dockerfile
    container_name: finance-backend-go
    environment:
      - PORT=8080
      - GIN_MODE=debug
      - JWT_SECRET=your-super-secret-jwt-key-for-development
      - DATABASE_DSN=host=postgres user=${POSTGRES_USER:-postgres} password=${POSTGRES_PASSWORD:-yourpassword} dbname=${POSTGRES_DB:-finance_db} port=5432 sslmode=disable TimeZone=Asia/Jakarta
      - AI_SERVICE_URL=http://categorizer-ai:5000
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finance-network
    restart: unless-stopped

  # Python AI Service
  categorizer-ai:
    build:
      context: ./categorizer-ai-service
      dockerfile: Dockerfile
    container_name: categorizer-ai-service
    environment:
      - PORT=5000
      - FLASK_ENV=development
    ports:
      - "5000:5000"
    networks:
      - finance-network
    volumes:
      - ./categorizer-ai-service:/app
      - ./models:/app/models
    command: python app.py
    restart: unless-stopped

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: finance-redis
    ports:
      - "6379:6379"
    networks:
      - finance-network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Adminer - Database UI
  adminer:
    image: adminer
    container_name: finance-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks:
      - finance-network
    depends_on:
      - postgres

  # Nginx (Optional - for production setup)
  nginx:
    image: nginx:alpine
    container_name: finance-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - finance-backend
      - categorizer-ai
    networks:
      - finance-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  finance-network:
    driver: bridge
